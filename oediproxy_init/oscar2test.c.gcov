        -:    0:Source:oscar2test.c
        -:    0:Graph:oscar2test.gcno
        -:    0:Data:oscar2test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <string.h>
        -:    2:
        -:    3:#define __OSCAR2_TEST__
        -:    4:#include "oscar2.h"
        -:    5:
        2:    6:int cmp_frames(struct frame_t *f, struct frame_t *g) {
        2:    7:  if(!f && !g) return 0;
        -:    8:
        2:    9:  if(!f) return -1;
        -:   10:
        2:   11:  if(!g) return 1;
        -:   12:
        2:   13:  if(f->l < g->l) return -1;
        2:   14:  if(f->l > g->l) return 1;
        -:   15:
        2:   16:  return memcmp(f->buf, g->buf, f->l);
        -:   17:}
        -:   18:
        2:   19:int cmp_frame_queues(struct frame_queue_t *q, struct frame_queue_t *p, int include_next) {
        -:   20:  int i;
        -:   21:
        2:   22:  i = cmp_frames(&q->f, &p->f);
        2:   23:  if(0 != i)
        1:   24:    return i;
        -:   25:
        1:   26:  if(include_next == 1 && q->next != p->next) return -1;
        1:   27:  if(include_next == 2) {
    #####:   28:    int cmp_next = cmp_frame_queues(q->next, p->next, include_next);
    #####:   29:    if(cmp_next != 0)
    #####:   30:      return cmp_next;
        -:   31:  }
        -:   32:
        1:   33:  return 0;
        -:   34:}
        -:   35:
    #####:   36:void fail(char *file, int line, char *msg) {
    #####:   37:  printf("FAIL: %s:%d: %s\n", file, line, msg);
    #####:   38:}
        -:   39:
        -:   40:#define FAIL(msg) fail(__FILE__, __LINE__, (msg))
        -:   41:
        1:   42:int test_frame_enqueue() {
        1:   43:  struct frame_queue_t *root = NULL;
        -:   44:  struct frame_queue_t *cur;
        -:   45:
        -:   46:  struct frame_queue_t expected;
        -:   47:
        1:   48:  int errs = 0;
        -:   49:
        1:   50:  expected.f.buf = "hi mom";
        1:   51:  expected.f.l = strlen("hi mom");
        1:   52:  expected.fixup_seqno = NO_SEQNO_FIXUP;
        1:   53:  expected.next = NULL;
        -:   54:
        1:   55:  cur = frame_enqueue(root, "hi mom", strlen("hi mom"), NO_SEQNO_FIXUP);
        -:   56:
        1:   57:  if(0 != cmp_frame_queues(cur, &expected, 0)) {
    #####:   58:    FAIL("failed cmp:case=0");
    #####:   59:    errs++;
        -:   60:  }
        -:   61:
        1:   62:  expected.f.buf = "wrong";
        1:   63:  if(0 == cmp_frame_queues(cur, &expected, 0)) {
    #####:   64:    FAIL("failed cmp:case=wrong");
    #####:   65:    errs++;
        -:   66:  }
        -:   67:  
        -:   68:
        1:   69:  return errs;
        -:   70:}
        -:   71:
        -:   72:typedef int(*test_function)();
        -:   73:
        1:   74:int main(int argc, char* argv[]) {
        1:   75:  int errors = 0;
        -:   76:
        -:   77:  test_function tests[] = {
        -:   78:    test_frame_enqueue,
        1:   79:  };
        -:   80:
        -:   81:  int i;
        -:   82:
        -:   83:  int n_tests;
        -:   84:
        -:   85:  test_function curtest;
        -:   86:
        -:   87:
        1:   88:  n_tests = sizeof(tests)/sizeof(curtest);
        -:   89:
        2:   90:  for(i = 0; i < n_tests; i++) {
        1:   91:    curtest = tests[i];
        1:   92:    errors += curtest();
        -:   93:  }
        -:   94:
        -:   95:  
        1:   96:  printf("Got %d errors in %d tests\n", errors, n_tests);
        -:   97:  
        1:   98:  return 0;
        -:   99:}
